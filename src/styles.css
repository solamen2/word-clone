/*
  Theme and global variables
*/
html {
  overflow-y: scroll;

  --game-spacing: 32px;
  --header-height: 4rem;

  --color-success: hsl(150deg 70% 30%);
  --color-warning: hsl(50deg 100% 30%);
  --color-error: hsl(0deg 70% 45%);
  --color-gray-100: hsl(0deg 0% 10%);
  --color-gray-300: hsl(0deg 0% 25%);
  --color-gray-500: hsl(0deg 0% 50%);
  --color-gray-700: hsl(0deg 0% 75%);
  --color-gray-900: hsl(0deg 0% 90%);

  --key-background-color: var(--color-gray-900);
}

/*
  Custom styles
*/
body {
  font-family: sans-serif;
}

@media (max-height: 600px) {
  body {
    --game-spacing: 8px;
  }
}

button {
  margin: 0;
  padding: 0;
  border: none;
  background: transparent;
  cursor: pointer;
  text-align: left;
  color: inherit;
}

.wrapper {
  display: flex;
  flex-direction: column;
  min-height: 100%;
}

header {
  display: flex;
  position: relative;
  height: var(--header-height);
  border-bottom: 1px solid var(--color-gray-700);
  color: var(--color-gray-300);
}

.settings {
  display: flex;
  position: absolute;
  right: 12px;
  top: calc((var(--header-height) - 34px) / 2);
}

.toggle-label {
  display: flex;
  align-items: center;
  padding-right: 8px;
}

.toggle-wrapper {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
}

/* Hide default HTML checkbox */
.toggle-input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider */
.toggle-button {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  transition: 0.4s;
  border-radius: 34px;
}
.toggle-button:before {
  position: absolute;
  content: '';
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  transition: 0.4s;
  border-radius: 50%;
}

input:checked + .toggle-button {
  background-color: #2196f3;
}
input:focus + .toggle-button {
  box-shadow: 0 0 1px #2196f3;
}
input:checked + .toggle-button:before {
  transform: translateX(26px);
}

h1 {
  flex: 1;
  font-size: 2rem;
  line-height: var(--header-height);
  text-align: center;
}

@media (max-width: 25rem) {
  h1 {
    font-size: 1.25rem;
    text-align: left;
    padding-left: 32px;
  }
}

.game-wrapper {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: var(--game-spacing);
  padding: var(--game-spacing) 32px;
  margin: 0 auto;
  min-width: 250px;
  max-width: min(580px, 58vh, 100%);
}

@media (max-width: 550px) {
  .game-wrapper {
    gap: 8px;
    max-width: 25rem;
  }
}

.guess-results {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.guess {
  display: flex;
  gap: 4px;
  margin-bottom: 4px;
}

@keyframes flip-letter {
  0% {
    transform: rotate3d(1, 0, 0, 0deg);
    background: var(--color-gray-300);
    border-color: var(--color-gray-300);
  }

  50% {
    transform: rotate3d(1, 0, 0, 90deg);
    background: var(--color-gray-300);
    border-color: var(--color-gray-300);
  }

  50.01% {
    transform: rotate3d(1, 0, 0, 90deg);
  }

  100% {
    transform: rotate3d(1, 0, 0, 0deg);
  }
}

@keyframes letter-bounce {
  0% {
    transform: translateY(0%);
  }

  50% {
    transform: translateY(-100%);
  }

  100% {
    transform: translateY(0%);
  }
}

.cell {
  position: relative;
  width: 20%;
  display: grid;
  place-content: center;
  aspect-ratio: 1 / 1;
  border: 2px solid var(--color-gray-700);
  border-radius: var(--radius);
  font-size: 2rem;
}

.cell.used {
  color: white;

  animation: flip-letter calc(2 * var(--flip-letter-speed)) linear backwards;
  animation-delay: calc(var(--flip-letter-speed) * var(--index));
}

.cell.used.correct {
  background: var(--color-success);
  border-color: var(--color-success);
}
.cell.used.incorrect {
  background: var(--color-gray-300);
  border-color: var(--color-gray-300);
}
.cell.used.misplaced {
  background: var(--color-warning);
  border-color: var(--color-warning);
}
.cell.isWinningGuess {
  animation: letter-bounce calc(2 * var(--flip-letter-speed))
      calc(var(--time-to-finish-flips) + calc(100ms * var(--index))),
    flip-letter calc(2 * var(--flip-letter-speed)) linear backwards
      calc(var(--flip-letter-speed) * var(--index));
}

/*
  Round the corners for the 4 cells at the very corners of
  the game board
*/
.guess:first-of-type .cell:first-of-type {
  --radius: 4px 0px 0px 0px;
}
.guess:first-of-type .cell:last-of-type {
  --radius: 0px 4px 0px 0px;
}
.guess:last-of-type .cell:last-of-type {
  --radius: 0px 0px 4px 0px;
}
.guess:last-of-type .cell:first-of-type {
  --radius: 0px 0px 0px 4px;
}

.keys {
  display: flex;
  gap: 4px;
  flex-direction: column;
}

.key-row {
  display: flex;
  gap: 4px;
  justify-content: center;
}

.key {
  display: flex;
  justify-content: center;
  min-width: fit-content;
  padding: 0 0.5rem;
  width: 3rem;
  border: 2px solid var(--key-background-color);
  border-radius: 4px;
  font-size: 2rem;
  background: var(--key-background-color);
  color: black;
}

@media (max-width: 550px) {
  .key {
    padding: 0;
    width: 2rem;
  }
}

/* Note: Using keyframe to do this instead of transition to avoid
 ugly delays when switching dark mode on and off */
@keyframes flip-letters-wait {
  0% {
    background: var(--key-background-color);
    border-color: var(--key-background-color);
    color: black;
  }

  99.99% {
    background: var(--key-background-color);
    border-color: var(--key-background-color);
    color: black;
  }

  100% {
  }
}

.key.used {
  animation: flip-letters-wait 0ms backwards;
  animation-delay: var(--time-to-finish-flips);
}

.key.used.correct {
  /* HACK: Use transition logic only for correct color, so we won't see the color early.
   This works without causing dark mode switchover issues because the correct color doesn't change
   during dark mode transitions. */
  transition: background, border-color, color;
  transition-duration: 0ms;
  transition-delay: calc(var(--time-to-finish-flips));

  background: var(--color-success);
  border-color: var(--color-success);
  color: white;
}
.key.used.incorrect {
  background: var(--color-gray-300);
  border-color: var(--color-gray-300);
  color: white;
}
.key.used.misplaced {
  background: var(--color-warning);
  border-color: var(--color-warning);
  color: white;
}

.guess-input-wrapper {
  display: flex;
  flex-direction: column;
  gap: 8px;
  height: 6.75rem;
}

.guess-input-wrapper label {
  font-size: 1.25rem;
}

.guess-input-wrapper input {
  display: block;
  width: 100%;
  font-size: 2rem;
  border: 2px solid var(--color-gray-300);
  border-radius: 4px;
  padding: 8px 16px;
  outline-offset: 4px;
}

.banner {
  position: fixed;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
  padding: 32px;
  text-align: center;
  animation: slideUp 750ms cubic-bezier(0, 0.72, 0.24, 1.02) backwards;
  border-radius: 4px 4px 0px 0px;
  will-change: transform;
  z-index: 2;
}

.happy.banner {
  background: var(--color-success);
  color: white;
}
.sad.banner {
  background: var(--color-error);
  color: white;
}

.reset-button {
  background: var(--color-gray-900);
  color: black;
  border-radius: 4px;
  padding: 2px;
  margin-top: 8px;
}

.visually-hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

/*
  Modal styles

  HACK: I'm doing this in a quick and dirty way.
  Later in the course, we'll see my preferred way of building
  modals in React.
*/
[data-reach-dialog-content] {
  position: relative;
  border-radius: 8px;
  padding: 24px 32px;
}
.modal-close-btn {
  position: absolute;
  top: 0;
  right: 0;
  padding: 16px;
  cursor: pointer;
}
.modal-title {
  margin-bottom: 0.5em;
}

/*
  Keyframe animations
*/
@keyframes slideUp {
  from {
    transform: translateY(100%);
  }
  to {
    transform: translateY(0%);
  }
}

/* Dark mode styles */

.dark-mode {
  background-color: var(--color-gray-300);
}

.dark-mode header {
  color: var(--color-gray-900);
}

.dark-mode .game-wrapper {
  color: var(--color-gray-900);
}

.dark-mode .cell.used.incorrect {
  background-color: var(--color-gray-500);
  border-color: var(--color-gray-500);
}

.dark-mode .key {
  --key-background-color: var(--color-gray-700);
}

.dark-mode .key.used.incorrect {
  background-color: var(--color-gray-500);
  border-color: var(--color-gray-500);
}

.dark-mode .word-input {
  color: var(--color-gray-100);
  background-color: var(--color-gray-700);
  border-color: var(--color-gray-900);
}
